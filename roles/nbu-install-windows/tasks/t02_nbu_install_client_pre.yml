
# Get host token from master server

- name: -> Get list of existing hosts
  win_uri:
    url: https://{{ master_server }}:1556/netbackup/config/hosts
    method: GET
    return_content: true
    headers:
      Content-Type: "{{ nbu_content_type }}"
      Authorization: "{{ NBU_API_KEY }}"    
    status_code:
      - 200
    validate_certs: no
  register: host_list
  tags:
    - server_nbu_prep
    - server_nbu_prep_authtoken

- name: -> NBU Host Certificates - find host mapping for existing server
  set_fact:
    host_check: "{{ item.0.uuid }}"
  with_subelements: 
    - "{{ host_list.json.hosts }}"
    - hostMappings
  when: 
    - item.1.mappedHostName == inventory_hostname_short
  tags:
    - get_auth_token

- name: -> Cleans all invalid authorization tokens
  win_uri:
    url: https://{{ master_server }}:1556/netbackup/security/securitytokens/delete/invalid
    method: POST
    return_content: true
    headers:
      Content-Type: "{{ nbu_content_type }}"
      Authorization: "{{ NBU_API_KEY }}" 
    body: '{
             "reason": "Ansible cleanup"
           }'
    validate_certs: no
    status_code:
      - 204
  tags:
    - server_nbu_prep
    - server_nbu_prep_authtoken

- name: -> Set randon string as the Token Name
  set_fact:
    token_name: "TKN{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
  tags:
    - server_nbu_prep
    - server_nbu_prep_authtoken

- name: -> Create reissue token for host
  win_uri:
    url: https://{{ master_server }}:1556/netbackup/security/securitytokens
    method: POST
    return_content: true
    headers:
      Content-Type: "{{ nbu_content_type }}"
      Authorization: "{{ NBU_API_KEY }}" 
    body: '{ 
             "tokenName": "{{ token_name }}",
             "hostId": "{{ host_check }}",
             "validFor": 3600, 
             "allowedCount": 1 
           }'
#    body_format: json
    validate_certs: no
    status_code:
      - 201
  register: token
  tags:
    - server_nbu_prep
    - server_nbu_prep_authtoken
  when:
    - host_check is defined

- name: -> Set reissue authorisation token result as Fact
  set_fact:
    auth_token: "{{ token.json.tokenValue }}"
  tags:
    - server_nbu_prep
    - server_nbu_prep_authtoken
  when:
    - host_check is defined

- name: -> Create reissue token for host 
  win_uri:
    url: https://{{ master_server }}:1556/netbackup/security/securitytokens
    method: POST
    return_content: true
    headers:
      Content-Type: "{{ nbu_content_type }}"
      Authorization: "{{ NBU_API_KEY }}" 
    body: '{ 
             "tokenName": "{{ token_name }}",
             "validFor": 3600, 
             "allowedCount": 1 
           }'
#    body_format: json
    validate_certs: no
    status_code:
      - 201
  register: token
  tags:
    - server_nbu_prep
    - server_nbu_prep_authtoken
  when:
    - host_check is undefined

- name: -> Set token for host as Fact
  set_fact:
    auth_token: "{{ token.json.tokenValue }}"
  tags:
    - server_nbu_prep
    - server_nbu_prep_authtoken
  when:
    - host_check is undefined

# Get Master Server CA Fingerprint

- name: -> Get NBU CA fingerprint
  win_uri:
    url: https://{{ master_server }}:1556/netbackup/security/certificate-authorities?page%5Bdisable%5D=true
    method: GET
    return_content: true
    headers:
      Content-Type: "{{ nbu_content_type }}"
      Authorization: "{{ NBU_API_KEY }}"     
    status_code:
      - 200
    validate_certs: no
  register: ca_fprint
  tags:
    - server_nbu_prep
    - server_nbu_prep_cacert

- name: -> Set Master CA Certificate fingerprint as Fact
  set_fact:
    master_ca_cert: "{{ item.attributes.nbcaCertDetails.fingerprint }}"
  with_items: "{{ ca_fprint.json.data }}"
  when: 
    - item.attributes.nbcaCertDetails.state == "ACTIVE"
  tags:
    - server_nbu_prep
    - server_nbu_prep_cacert

- debug:
    msg: "{{ master_ca_cert }}"
